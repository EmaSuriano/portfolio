---
import GithubSlugger from "github-slugger";
import type { CollectionEntry } from "astro:content";
import { extractMarkdownTitles } from "helpers";

type Props = { entry: CollectionEntry<"blog"> };

const slugs = new GithubSlugger();

const { body } = Astro.props.entry;

const titles = extractMarkdownTitles(body).map(({ level, title }) => ({
  margin: level <= 2 ? "ml-4" : level === 3 ? "ml-6" : "ml-8",
  title,
  slug: slugs.slug(title),
}));
---

<nav
  id="blog-navigation"
  class="transition-opacity sticky top-24 hidden lg:block overflow-x"
>
  <div class="absolute right-0 w-60 -mr-40">
    <b>Content</b>
    <ol>
      {
        titles.map(({ title, margin, slug }) => (
          <li>
            <a
              href={`#${slug}`}
              class={`transition-opacity opacity-30 focus:opacity-80 hover:opacity-80 ${margin}`}
            >
              {title}
            </a>
          </li>
        ))
      }
    </ol>
  </div>
</nav>

<style>
  a {
    text-decoration: none;
    display: block;

    padding: 0.125rem 0;
  }
</style>

<script>
  const navLinks = document.querySelectorAll("nav li a");
  let lastVisible = navLinks[0]; // Start with the first link as the initial selection

  const observer = new IntersectionObserver((entries) => {
    let intersectingEntries: Element[] = [];

    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const id = entry.target.getAttribute("id");
        const elem = document.querySelector(`nav li a[href="#${id}"]`)!;

        intersectingEntries.push(elem);
      }
    });

    // Clear all highlights
    navLinks.forEach((link) => {
      link.classList.remove("opacity-100");
      link.classList.add("opacity-30");
    });

    // If there are intersecting entries, highlight the first one
    if (intersectingEntries[0]) {
      intersectingEntries[0].classList.add("opacity-100");
      intersectingEntries[0].classList.remove("opacity-30");
      lastVisible = intersectingEntries[0];
    } else if (lastVisible) {
      // If no sections are intersecting, highlight the last visible link
      lastVisible.classList.add("opacity-100");
      lastVisible.classList.remove("opacity-30");
    }
  });

  // Track all sections that have an `id` applied
  document.querySelectorAll("h2[id], h3[id], h4[id]").forEach((target) => {
    observer.observe(target);
  });
</script>

<script>
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      const elem = document.querySelector(`#blog-navigation`)!;
      if (entry.isIntersecting) {
        elem.classList.add("opacity-0");
      } else {
        elem.classList.remove("opacity-0");
      }
    });
  });

  observer.observe(document.querySelector("#blog-comments")!);
</script>
